@namespace Makani
@using Makani.Components.Forms.Validators
@using System.Text.RegularExpressions
@inject ILogger<MkTextField> Log

<div class="flex flex-col relative">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        if (LabelType == MkLabelType.Default)
        {
            <label for="@Id" class="text-gray-700 dark:text-gray-300 mb-2">@Label</label>
        }
    }
    <input id="@Id"
           type="text"
           @onchange="OnChange" @oninput="OnInput"
           placeholder="@Placeholder"
           class="@baseCss @(hasError ? errorBorder : defaultBorder)" />
    @if (Suffix != null)
    {
        <div @onclick="() => { OnSuffixClick.InvokeAsync(); }" class="absolute inset-y-0 right-0 flex items-center px-4 cursor-pointer group @suffixCss">
            @Suffix
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(Label) && LabelType == MkLabelType.Floating)
    {
        <!-- todo: integrate bg color with customization / user selected bg color -->
        <label for="@Id" class="cursor-text dark:bg-gray-900 bg-slate-100 absolute left-2 peer-placeholder-shown:left-2 -top-3 text-gray-700 dark:text-gray-300 text-sm transition-all peer-placeholder-shown:bg-transparent dark:peer-focus:bg-gray-900 peer-focus:bg-slate-100 peer-placeholder-shown:top-3 peer-focus:-top-3 peer-focus:text-sm">@Label</label>
    }
    @if (!string.IsNullOrWhiteSpace(HelperText) && string.IsNullOrWhiteSpace(errorMessage))
    {
        <span class="text-xs font-sans dark:text-gray-400 text-gray-600 py-2">@HelperText</span>
    }
    else if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <span class="text-xs font-sans dark:text-error-600 text-error-800 py-2">@errorMessage</span>
    }

</div>

@code {
    private readonly List<IEntryValidator> _validators = new();
    private readonly Guid _guid = Guid.NewGuid();
    private bool hasError = false;
    private string baseCss = "peer block px-4 py-2 border focus:outline focus:outline-2 focus:outline-offset-2 outline-primary-500 dark:outline-gray-300 text-gray-700 dark:text-gray-300 dark:bg-transparent rounded-md";
    private string defaultBorder = "border-gray-200 dark:border-gray-600";
    private string errorBorder = "border-error-800 dark:border-error-600";
    private string? errorMessage;

    // the suffix needs different margins depending on labels and helper text
    private string suffixCss => GetSuffixCss();


    internal string Id => $"entry-{_guid}";

    protected override void OnInitialized()
    {
        if (Required == true)
        {
            _validators.Add(new RequiredValidator());
        }

        if (MinLength.HasValue)
        {
            _validators.Add(new MinLengthValidator(MinLength.Value));
        }

        if (MaxLength.HasValue)
        {
            _validators.Add(new MaxLengthValidator(MaxLength.Value));
        }

        if (!string.IsNullOrWhiteSpace(Regex))
        {
            _validators.Add(new RegexValidator(new Regex(Regex)));
        }

        if (Min.HasValue)
        {
            _validators.Add(new MinMaxValidator(Min.Value, Max));
        }
    }

    /// <summary>
    /// Defaults to immediate mode
    /// </summary>
    [Parameter]
    public EntryMode Mode { get; set; } = EntryMode.Immediate;

    /// <summary>
    /// Optional label (recommended)
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Optional label type
    /// </summary>
    [Parameter]
    public MkLabelType LabelType { get; set; }

    /// <summary>
    /// Optional helper text
    /// </summary>
    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    /// <summary>
    /// Makes the input required.
    /// </summary>
    [Parameter]
    public bool? Required { get; set; }

    /// <summary>
    /// Enforces a minimum string length.
    /// </summary>
    [Parameter]
    public int? MinLength { get; set; }

    /// <summary>
    /// Enforces a maximum string length.
    /// </summary>
    [Parameter]
    public int? MaxLength { get; set; }

    /// <summary>
    /// Enforces a minimum for integers.
    /// </summary>
    [Parameter]
    public int? Min { get; set; }

    /// <summary>
    /// Enforces a maximum for integers.
    /// </summary>
    [Parameter]
    public int? Max { get; set; }

    /// <summary>
    /// Validates using the Regular Expression.
    /// </summary>
    [Parameter]
    public string? Regex { get; set; }

    [Parameter]
    public string? Placeholder { get; set; } = " "; // default placeholder to an empty string. required for floating labels.

    /// <summary>
    /// Invoked when a validator indicates a validation error.
    /// </summary>
    [Parameter]
    public EventCallback<IList<ValidationResult>> OnError { get; set; }

    [Parameter]
    public RenderFragment? Suffix { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSuffixClick { get; set; }

    public async Task OnChange(ChangeEventArgs args)
    {
        // pass in args value, the Value property is not updated at this point
        Validate(args.Value);
        await ValueChanged.InvokeAsync(args.Value?.ToString() ?? string.Empty);
    }

    public async Task OnInput(ChangeEventArgs args)
    {
        if (Mode != EntryMode.Immediate)
        {
            return;
        }

        // pass in args value, the Value property is not updated at this point
        Validate(args.Value);
        await ValueChanged.InvokeAsync(args.Value?.ToString() ?? string.Empty);
    }

    internal void Validate(object? value)
    {
        var strValue = value?.ToString();
        var results = new List<ValidationResult>();
        foreach (var v in _validators)
        {
            results.Add(v.Validate(strValue));
        }

        if (results.Any(p => !p.Valid))
        {
            hasError = true;
            errorMessage = results.First(p => !p.Valid).Message;
            OnError.InvokeAsync(results);
        }
        else
        {
            errorMessage = null;
            hasError = false;
        }
    }

    private string GetSuffixCss()
    {
        if (!string.IsNullOrWhiteSpace(Label) && LabelType != MkLabelType.Floating && string.IsNullOrWhiteSpace(HelperText))
        {
            return "mt-9";
        }

        if (LabelType == MkLabelType.Floating && (!string.IsNullOrWhiteSpace(HelperText) || !string.IsNullOrWhiteSpace(errorMessage)))
        {
            return "-mt-8";
        }

        return string.Empty;
    }
}